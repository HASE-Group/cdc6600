// Project:	CDC 6600
// Unit:	Fixed Add Unit
// File:	fx_addU.hase
// Date:	Sep 2015

$class_decls

//entity references

 scoreboard * mySB;

//structures and variables

 bool Busy, ReadFlag_j, ReadFlag_k, conflict2;
 bool go_store, go_store_wait, goto_if;

  int unit_no, latency, Q;
  int test_result;

  t_data input, Operands, Qvalues;
  t_reg_read ReadRequest;
  t_reg_write WriteRequest;
  t_unit_data_reg result[4];

//classes

$class_defs

$pre

 mySB = (scoreboard*)sim.get_entity(sim.get_entity_id("SCOREBOARD"));

 ReadFlag_j = false;
 ReadFlag_k = false;
 Busy = false;
 latency = 2;
 my_state = FX_ADD_IDLE;
 dump_state();
result[3].valid = 0;
result[2].valid = 0;
result[1].valid = 0;
result[0].valid = 0;

go_store = false;
go_store_wait = false;
goto_if = false;

$phase0

// predicates for use in sim_waiting test

  sim_from_port data_input(data_in);
  sim_from_port control_input(control_in);

// move result through virtual pipeline used to model latency
 for (int j = (latency-1); j>=1; j--)
 {result[j] = result[j-1];}
  result[0].data = 0;
  result[0].valid = 0;


 if (sim_waiting(ev, data_input) > 0)
  {
   SIM_CAST(t_data, Operands, ev);
   DATA1 = Operands.word0;
   DATA2 = Operands.word1;
   dump_state();
  if  (strcmp (IDENTS.m,  "SUM") == 0)
   {result[0].data = Operands.word0 + Operands.word1;}
  if  (strcmp (IDENTS.m,  "DIF") == 0)
   {result[0].data = Operands.word0 - Operands.word1;}
  if ( (strcmp (IDENTS.m,  "GOTOeq") == 0) || (strcmp (IDENTS.m,  "GOTOne") == 0)
    || (strcmp (IDENTS.m,  "GOTOge") == 0) || (strcmp (IDENTS.m,  "GOTOlt") == 0) )
   {
    result[0].data = DATA1;
    goto_if = true;
   }
   result[0].valid = 1;
  }
		  // end of ClockPhase 0

$phase1

 sim_from_port data_input(data_in);
 sim_from_port control_input(control_in);

 if (sim_waiting(ev, data_input) > 0)
  {
   if (ev.type() == Q_VALUES)				// sent by registers
   {
    SIM_CAST(t_data, Qvalues, ev);
    IDENTS.Qj = Qvalues. word0;
    IDENTS.Qk = Qvalues. word1;

// check for second order conflicts

    if ( (IDENTS.Qj != 8) && (IDENTS.Qk != 8) )
     {
      ReadFlag_j = false;
      ReadFlag_k = false;
      conflict2 = true;
      strcpy(CONF2.j, IDENTS.Fj);
      strcpy(CONF2.k, IDENTS.Fk);
     }
    else if ( (IDENTS.Qj == 8) && (IDENTS.Qk != 8) )
     {
      ReadFlag_j = true;
      ReadFlag_k = false;
      conflict2 = true;
      strcpy(CONF2.k, IDENTS.Fk);
     }
    else if ( (IDENTS.Qj != 8) && (IDENTS.Qk == 8) )
     {
      ReadFlag_j = false;
      ReadFlag_k = true;
      conflict2 = true;
      strcpy(CONF2.j, IDENTS.Fj);
     }
    else
     {
      ReadFlag_j = true;
      ReadFlag_k = true;
     }

    if (ReadFlag_j && ReadFlag_k)
     {
       strcpy(ReadRequest.Fj,  IDENTS.Fj);
       strcpy(ReadRequest.Fk, IDENTS.Fk);
       send_REG_READ(data_out, ReadRequest);
       ReadFlag_j = false;
       ReadFlag_k = false;
      my_state = FX_ADD_BUSY;
      }
     else
      {my_state = FX_ADD_HELD;}
    dump_state();
   }				// end of Q_VALUES
 }

 if (sim_waiting(ev, control_input) > 0)
 {
  if (ev.type() == GO_STORE)
   {
    SIM_CAST(int, Q, ev);
    if (Q == unit_no)
     {go_store = true;}
    if (Q == IDENTS.Qj)
     {
      IDENTS.Qj = 8;
      ReadFlag_j = true;
      strcpy(CONF2.j, "__");
     }
    if (Q == IDENTS.Qk)
     {
      IDENTS.Qk = 8;
      ReadFlag_k = true;
      strcpy(CONF2.k, "__");
      }

    if (ReadFlag_j && ReadFlag_k && conflict2)
      {
       conflict2 = false;
       ReadFlag_j = false;
       ReadFlag_k = false;
       strcpy(ReadRequest.Fj,  IDENTS.Fj);
       strcpy(ReadRequest.Fk, IDENTS.Fk);
       sim_hold(5);									//  to allow time for register to have been updated
       send_REG_READ(data_out, ReadRequest);
// printf("FX_ADD sending ReadRequest to Registers\n");
       my_state = FX_ADD_BUSY;
      }
   }
       dump_state_i();
  }				// end of ev

 if (result[latency-1].valid == 1)
  {
    RESULT = result[latency-1].data;
    strcpy (CONF3, IDENTS.Fi);
    my_state = FX_ADD_HELD;
    dump_state_i();
    if ( (strcmp (IDENTS.m,  "SUM") == 0) || (strcmp (IDENTS.m,  "DIF") == 0) )
     {
      send_REQUEST_RELEASE(control_out, unit_no);
// printf("FX_ADD sending request_release to SCBD, result = %d \n", RESULT);
      go_store_wait = true;
     }

    if ( goto_if)
     {
      test_result = 0;
      if (result[latency-1].data == 0)	
       {test_result = 0;}				// test result bits 30 31 = 0 0 - zero
      else
       {test_result = 1;}				// test result bits 30 31 = 0 1 - non-zero, positive
      if (result[latency-1].data < 0)
       {test_result = 3;}				// test result bits 30 31 = 1 1 - non-zero, negative

       send_TEST_RESULT(to_branch, test_result);
//printf("FX_ADD sending result to Branch \n");
       goto_if = false;
       Busy = false;
       strcpy(CONF3, "__");
       my_state = FX_ADD_IDLE;
       dump_state();
     }

    sim_hold(2);
  }

if (go_store_wait && go_store)
 {
   strcpy(WriteRequest.Fi, IDENTS.Fi);
   WriteRequest.data = RESULT;
   send_REG_WRITE (data_out, WriteRequest);
   go_store = false;
   go_store_wait = false;
   sim_hold(1);
   Busy = false;
   strcpy(CONF3, "__");
   my_state = FX_ADD_IDLE;
   dump_state_i();
}

		// end of Clockphase 1
