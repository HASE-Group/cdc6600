// Project:		CDC 6600
// Unit:		Instruction Stack
// File:		istack.hase
// Date:		Aug 2015
// Revised:	

/*
Instructions are issued by the Scoreboard, but in order to avoid an additional pipeline stage delay,
the Scoreboard is not clocked and executes the various steps involved under the control of the
Instruction Stack.

-- Reservations
	-- An instruction is issued by executing the following four steps in sequence:
	-- 1	reserve the functional unit by setting its busy flag and entering the operating mode
	-- 2	set the register designators Fi, Fj, Fk in the functional unit
	-- 3	enter any previous result reservations Qj and Qk in the functional unit
	-- 4	set the result register identifier Xi, Bi or Ai with the functional unit number Qi

*/

$class_decls

//entity references

//structures and variables

 bool use_I0, use_I1, use_U0, use_U1, instrn_ready, loop;
 bool fetch_instrn;
 bool scb_ready, stopped;
 bool branch_dest_error;
 int Qi;
 int jump, newPA, APA, i;
 t_6600_instrn null;
 t_Instrn  instrn_to_scb;
 t_Dinstrn IR, mem_instrn, Dnull;
 t_mem_i_access mem_address;
 t_data branch_result;

//classes

$class_defs

$pre

 PA = 0;
 APA = 0;
 null.f = 0;
 null.m = 0;
 null.i = 0;
 null.j = 0;
 null.k = 0;
 Dnull.instrn0 = null;
 Dnull.instrn1 = null;
 U0_1.instrn0 = null;
 U0_1.instrn1 = null;
 use_I0 = false;
 use_I1 = false;
 use_U0 = false;
 use_U1 = false;
 instrn_ready = false;
 fetch_instrn = false;
 jump = 0;
 loop = false;
 scb_ready = true;
 stopped = false;
 branch_dest_error = false;
 my_state = IS_IDLE;
 dump_state();

 mem_address.address = APA;
 send_MEM_I_ACCESS(to_memory, mem_address);
 APA = APA + 2;

$phase0

// predicates for use in sim_waiting test

  sim_from_port mem_pkt(from_memory);
  sim_from_port branch_pkt(from_branch);
  sim_from_port scb_pkt(from_scboard);

 if (sim_waiting(scb_pkt) > 0)
  {
    sim_select(scb_pkt, ev);
    SIM_CAST(bool, scb_ready, ev);	// i.e. sets scb_ready
    PA ++;
    my_state = IS_BUSY;
   }


 if ( sim_waiting(branch_pkt) > 0)
  {
    sim_select(branch_pkt, ev);
    SIM_CAST(t_data, branch_result, ev);
    sim_hold(1);
    jump = branch_result.word0;
    newPA = branch_result.word1;
    if (jump == 1)
     {
      if ((newPA & 1) == 1)
       {
	stopSimulation();
	branch_dest_error = true;
       }
      else
       {
	D_L.word1 = 7 - ((PA - newPA) >> 1);					// D_L.word1 = L = Locator
        PA = newPA;
        if ( (D_L.word1 >= 0) && (D_L.word1 <= D_L.word0) && (instrn_to_scb.instrn.m > 2))
         {loop = true;}									// Branch within Stack by conditional branch
       else											// Branch out of Stack
        {
         loop = false;
	use_I0 = false;
	use_I1 = false;
	D_L.word0 = 0;									// D_L.word0 = D = Depth
	APA = (PA & - 2);
         fetch_instrn = true;
        }
      }
     }
    else					// jump = 0
      {
       loop = false;
       use_I0 = false;
       if ( (PA & 1) == 0)		// Branch instruction is first of pair
        {use_I1 = true;}
       else					// Branch instruction is second of pair
	{
	 use_I1 = false;}
          PA ++;
	 fetch_instrn = true;
         }
   scb_ready = true;
    my_state = IS_BUSY;
  }

 if ( (sim_waiting(mem_pkt) > 0)  && !stopped)
   {
    sim_select(mem_pkt, ev);
    SIM_CAST(t_Dinstrn, mem_instrn, ev);
//printf("ISTACK getting instructions from memory \n");
if (jump == 0)					// may have prefetched
{
    IR.instrn0 = mem_instrn.instrn0;
    IR.instrn1 = mem_instrn.instrn1;
    instr_stack.Update(7, IR);
    use_I0 = true;				// even after a branch since a branch must be to start of word
    my_state = IS_BUSY;
}
   }

 if (loop)
   {				    	 // do loop stuff
    if (D_L.word1 <= 7)
     {
      if (scb_ready)
       {
         if ((PA & 1) == 0)
          {
           U0_1.instrn0 = instr_stack[D_L.word1].instrn0;
           instrn_to_scb.instrn = U0_1.instrn0;
          }
        else
         {
          U0_1.instrn1 = instr_stack[D_L.word1].instrn1;
  	  instrn_to_scb.instrn = U0_1.instrn1;
	  D_L.word1 ++;
         }
        instrn_ready = true;
       }			// end of scb_ready
     }			// end of D_L.word1 <= 7		
   }			// end of loop
   else							// not in loop mode
  {
    if ( (use_I0 || use_I1) && scb_ready)
    {
     U0_1.instrn0 = instr_stack[7].instrn0;
     U0_1.instrn1 = instr_stack[7].instrn1;
     if (use_I0)
      {instrn_to_scb.instrn = U0_1.instrn0;}
    else
      {
      instrn_to_scb.instrn = U0_1.instrn1;
      if ((U0_1.instrn0.f != 0) && (U0_1.instrn1.f != 0))
       {fetch_instrn = true;}
      }
     D_L.word0 ++;
     if (D_L.word0 > 7)
      {D_L.word0 = 7;}
     instrn_ready = true;
    }		// end of scb_ready etc
  }		// end of else, i.e. not in loop mode
     dump_state();

		  // end of ClockPhase 0

$phase1

 if (instrn_ready && scb_ready && !stopped)
   {
    send_INSTRN (to_scboard, instrn_to_scb);
    scb_ready = false;
//printf("ISTACK sending instruction %d %d %d %d %d to Scoreboard \n", instrn_to_scb.instrn.f, instrn_to_scb.instrn.m, instrn_to_scb.instrn.i, instrn_to_scb.instrn.j, instrn_to_scb.instrn.k );

   if (!loop)
     {
      if (use_I0)
      {
       use_I0 = false;
       use_I1 = true;
      }
     else if (use_I1)
      {use_I1 = false;}
    }				// end of else

    instrn_ready = false;

    if (instrn_to_scb.instrn.f == 0)			// branch instruction, wait for result from BRANCH unit
     {
      if (instrn_to_scb.instrn.m == 0)			// STOP instruction
       {
        stopped = true;
        my_state = IS_IDLE;
        dump_state();
       }
      else
      {
        my_state = IS_HELD;
        dump_state();
       }
     }
   }				// end of instrn ready

  if (fetch_instrn && !stopped)
   {
    mem_address.address = APA;
    send_MEM_I_ACCESS(to_memory, mem_address);
    APA = APA + 2;
    fetch_instrn = false;
    jump = 0;
    for(i=0; i<7; i++)
      { instr_stack.Update(i, instr_stack[i+1]);}
    instr_stack.Update(7, Dnull);
   }
		// end of Clockphase 1

$report

if (branch_dest_error)
 {printf("Simulation stopped: Instruction Stack detected branch to instruction not at start of word \n");}

printf("Simulation ended at PA = %d\n", PA);